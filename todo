High priority
-------------
Show figures for amount of photo cropped and amount of pixels in what's left

Figure out the number of pixels we need in photos for them to be acceptable

Do something about signal disconnect bugs

Open image in real editor

Import image files

Filter person list by event

Ensure all database updates are committed before exit

Photos with apostrophe in the url

Error logging

vacuum and backup database on start

Do something with exceptions in the database thread

Photo fetching database logic

use pyinstaller instead of py2exe

Detect errors when login details wrong

When errors occur during photo uploading that we know are "just retry, EF sucks", retry them

Report on photos with bad sizes, res, or just rejected. Maybe suitable for email shot?

Bad filenames

Think of a way to pick up new registrations quickly. Maybe a report that takes a date?

Multiple simultaneous uploads, for speed? Downloads? Priority of those?

Later
-----
Report on bad/unsure images

Better browsing - sort by opinion, size badness, etc

Image history

EF fetch photos should allow "just this person"

When the application crashes to an exception, shut down worker threads before main application (or else they segfault)

Upload and fetch have a lot of code in common - build a
library. Coroutine model would work well as a superclass: let the
subclass supply the coro and the superclass supply the function
methods. Also consume netlib this way.

Better progress indicator?

Open questions
--------------
Actual image size on badges?

How much wrongness is acceptable?

What about police photo approval?

Eventsforce data model:
 - deduplication mess, what do we do?
 - time of last update?
